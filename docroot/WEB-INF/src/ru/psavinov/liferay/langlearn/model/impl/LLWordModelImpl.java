/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ru.psavinov.liferay.langlearn.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import ru.psavinov.liferay.langlearn.model.LLWord;
import ru.psavinov.liferay.langlearn.model.LLWordModel;
import ru.psavinov.liferay.langlearn.model.LLWordSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the LLWord service. Represents a row in the &quot;LangLearn_LLWord&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ru.psavinov.liferay.langlearn.model.LLWordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LLWordImpl}.
 * </p>
 *
 * @author Pavel Savinov
 * @see LLWordImpl
 * @see ru.psavinov.liferay.langlearn.model.LLWord
 * @see ru.psavinov.liferay.langlearn.model.LLWordModel
 * @generated
 */
@JSON(strict = true)
public class LLWordModelImpl extends BaseModelImpl<LLWord>
	implements LLWordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a LangLeardWord model instance should use the {@link ru.psavinov.liferay.langlearn.model.LLWord} interface instead.
	 */
	public static final String TABLE_NAME = "LangLearn_LLWord";
	public static final Object[][] TABLE_COLUMNS = {
			{ "wordId", Types.BIGINT },
			{ "locale", Types.VARCHAR },
			{ "word", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table LangLearn_LLWord (wordId LONG not null primary key,locale VARCHAR(75) null,word VARCHAR(75) null,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table LangLearn_LLWord";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.ru.psavinov.liferay.langlearn.model.LLWord"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.ru.psavinov.liferay.langlearn.model.LLWord"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.ru.psavinov.liferay.langlearn.model.LLWord"),
			true);
	public static long LOCALE_COLUMN_BITMASK = 1L;
	public static long WORD_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static LLWord toModel(LLWordSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		LLWord model = new LLWordImpl();

		model.setWordId(soapModel.getWordId());
		model.setLocale(soapModel.getLocale());
		model.setWord(soapModel.getWord());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<LLWord> toModels(LLWordSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<LLWord> models = new ArrayList<LLWord>(soapModels.length);

		for (LLWordSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.ru.psavinov.liferay.langlearn.model.LLWord"));

	public LLWordModelImpl() {
	}

	public long getPrimaryKey() {
		return _wordId;
	}

	public void setPrimaryKey(long primaryKey) {
		setWordId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_wordId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return LLWord.class;
	}

	public String getModelClassName() {
		return LLWord.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("wordId", getWordId());
		attributes.put("locale", getLocale());
		attributes.put("word", getWord());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long wordId = (Long)attributes.get("wordId");

		if (wordId != null) {
			setWordId(wordId);
		}

		String locale = (String)attributes.get("locale");

		if (locale != null) {
			setLocale(locale);
		}

		String word = (String)attributes.get("word");

		if (word != null) {
			setWord(word);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}
	}

	@JSON
	public long getWordId() {
		return _wordId;
	}

	public void setWordId(long wordId) {
		_wordId = wordId;
	}

	@JSON
	public String getLocale() {
		if (_locale == null) {
			return StringPool.BLANK;
		}
		else {
			return _locale;
		}
	}

	public void setLocale(String locale) {
		_columnBitmask |= LOCALE_COLUMN_BITMASK;

		if (_originalLocale == null) {
			_originalLocale = _locale;
		}

		_locale = locale;
	}

	public String getOriginalLocale() {
		return GetterUtil.getString(_originalLocale);
	}

	@JSON
	public String getWord() {
		if (_word == null) {
			return StringPool.BLANK;
		}
		else {
			return _word;
		}
	}

	public void setWord(String word) {
		_columnBitmask |= WORD_COLUMN_BITMASK;

		if (_originalWord == null) {
			_originalWord = _word;
		}

		_word = word;
	}

	public String getOriginalWord() {
		return GetterUtil.getString(_originalWord);
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LLWord.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LLWord toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (LLWord)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		LLWordImpl llWordImpl = new LLWordImpl();

		llWordImpl.setWordId(getWordId());
		llWordImpl.setLocale(getLocale());
		llWordImpl.setWord(getWord());
		llWordImpl.setCompanyId(getCompanyId());
		llWordImpl.setUserId(getUserId());
		llWordImpl.setUserName(getUserName());
		llWordImpl.setCreateDate(getCreateDate());
		llWordImpl.setModifiedDate(getModifiedDate());

		llWordImpl.resetOriginalValues();

		return llWordImpl;
	}

	public int compareTo(LLWord llWord) {
		long primaryKey = llWord.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		LLWord llWord = null;

		try {
			llWord = (LLWord)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = llWord.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LLWordModelImpl llWordModelImpl = this;

		llWordModelImpl._originalLocale = llWordModelImpl._locale;

		llWordModelImpl._originalWord = llWordModelImpl._word;

		llWordModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LLWord> toCacheModel() {
		LLWordCacheModel llWordCacheModel = new LLWordCacheModel();

		llWordCacheModel.wordId = getWordId();

		llWordCacheModel.locale = getLocale();

		String locale = llWordCacheModel.locale;

		if ((locale != null) && (locale.length() == 0)) {
			llWordCacheModel.locale = null;
		}

		llWordCacheModel.word = getWord();

		String word = llWordCacheModel.word;

		if ((word != null) && (word.length() == 0)) {
			llWordCacheModel.word = null;
		}

		llWordCacheModel.companyId = getCompanyId();

		llWordCacheModel.userId = getUserId();

		llWordCacheModel.userName = getUserName();

		String userName = llWordCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			llWordCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			llWordCacheModel.createDate = createDate.getTime();
		}
		else {
			llWordCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			llWordCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			llWordCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return llWordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{wordId=");
		sb.append(getWordId());
		sb.append(", locale=");
		sb.append(getLocale());
		sb.append(", word=");
		sb.append(getWord());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("ru.psavinov.liferay.langlearn.model.LLWord");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>wordId</column-name><column-value><![CDATA[");
		sb.append(getWordId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>locale</column-name><column-value><![CDATA[");
		sb.append(getLocale());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>word</column-name><column-value><![CDATA[");
		sb.append(getWord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LLWord.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			LLWord.class
		};
	private long _wordId;
	private String _locale;
	private String _originalLocale;
	private String _word;
	private String _originalWord;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _columnBitmask;
	private LLWord _escapedModelProxy;
}